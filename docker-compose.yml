version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: canairy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - canairy-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: canairy-postgres
    environment:
      POSTGRES_DB: canairy
      POSTGRES_USER: canairy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-canairy_secret}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U canairy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - canairy-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: canairy-backend
    environment:
      DATABASE_URL: postgresql://canairy:${POSTGRES_PASSWORD:-canairy_secret}@postgres:5432/canairy
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      # API Keys
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      FRED_API_KEY: ${FRED_API_KEY}
      ACLED_API_KEY: ${ACLED_API_KEY}
      ACLED_EMAIL: ${ACLED_EMAIL}
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - canairy-network
    restart: unless-stopped

  # Frontend (Development)
  frontend:
    image: node:18-alpine
    container_name: canairy-frontend
    working_dir: /app
    command: npm run dev
    environment:
      VITE_API_URL: http://backend:8000
      VITE_WS_URL: ws://backend:8000
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - canairy-network
    profiles:
      - dev

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: canairy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./dist:/usr/share/nginx/html
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - canairy-network
    profiles:
      - prod

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: canairy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - canairy-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: canairy-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - canairy-network
    profiles:
      - monitoring

networks:
  canairy-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: